import{g as d}from"./vendor.cfaae494.js";var a;(function(e){e.WALL="wall",e.FOOD="food",e.STREET="street",e.PACMON="pacmon",e.EMPTY=""})(a||(a={}));var r;(function(e){e.UP="up",e.DOWN="down",e.LEFT="left",e.RIGHT="right"})(r||(r={}));const c=[{axis:"x",direction:[r.LEFT,r.RIGHT]},{axis:"y",direction:[r.UP,r.DOWN]}],C=d("board",{state:()=>({row:0,col:0,board:[],selectedCoordinate:[],cells:[],isAnimating:!1,isAnimatingInitialAnimation:!1}),getters:{getCellId(){return({y:e,x:t})=>`${e},${t}`},hasPacmonInBoard(){return this.board.some(e=>e.some(t=>t===a.PACMON))},getPacmonCoordinate(){for(let e=0;e<this.board.length;e++)for(let t=0;t<this.board[e].length;t++)if(this.board[e][t]===a.PACMON)return{y:e,x:t};return null},hasSelectedCoordinate(){return this.selectedCoordinate.length>0}},actions:{generateBoard(){this.board=Array(this.row).fill([]).map(()=>Array(this.col).fill(a.EMPTY))},setBoardItem({y:e,x:t},i){this.board[e][t]=i},setBulkBoardItem(e){this.selectedCoordinate.forEach(t=>this.setBoardItem(t,e))},setSelectedCoordinate(e){this.selectedCoordinate.push(e)},setBulkSelectedCoordinate(e){var s;const t=(s=this.selectedCoordinate[this.selectedCoordinate.length-1])!=null?s:null;if(!t)return;const i={y:Math.min(t.y,e.y),x:Math.min(t.x,e.x)},l={y:Math.max(t.y,e.y),x:Math.max(t.x,e.x)};for(let n=i.y;n<=l.y;n++)for(let o=i.x;o<=l.x;o++)this.isInSelectedCoordinate({y:n,x:o})||this.setSelectedCoordinate({y:n,x:o})},isInSelectedCoordinate(e){return this.selectedCoordinate.some(t=>JSON.stringify(e)===JSON.stringify(t))},getSelectedCoordinateIndex(e){return this.selectedCoordinate.findIndex(t=>JSON.stringify(e)===JSON.stringify(t))},removeSelectedCoordinate(e){this.selectedCoordinate.splice(this.getSelectedCoordinateIndex(e),1)},clearSelectedCoordinate(){this.selectedCoordinate=[]},resetBoard(){this.clearSelectedCoordinate(),this.board=[],this.row=0,this.col=0,this.cells=[],this.isAnimating=!1},generateCells(){this.cells=this.board.reduce((e,t,i)=>[...e,...t.map((l,s)=>({id:this.getCellId({y:i,x:s}),count:0,swapDirection:null,swap:null,resolve:null}))],[])},getCell(e){return this.cells.find(t=>t.id===this.getCellId(e))},setCell(e,t,i){const l=this.cells.findIndex(s=>s.id===this.getCellId(e));this.cells[l][t]=i},setCellDirection(e,t){this.setCell(e,"swapDirection",t)},swapCell({currentCoordinate:e,nextCoordinate:t}){c.forEach(({axis:i,direction:l})=>{const{current:s,next:n}={current:e[i],next:t[i]};if(s===n)return;const o=s>n?0:1;this.setCellDirection(e,l[o%2]),this.setCellDirection(t,l[(o+1)%2])})}}});export{a as B,C as u};
