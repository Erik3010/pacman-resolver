import{g as d}from"./vendor.cfaae494.js";var n;(function(e){e.WALL="wall",e.FOOD="food",e.STREET="street",e.PACMON="pacmon",e.EMPTY=""})(n||(n={}));var a;(function(e){e.UP="up",e.DOWN="down",e.LEFT="left",e.RIGHT="right"})(a||(a={}));const c=[{axis:"x",direction:[a.LEFT,a.RIGHT]},{axis:"y",direction:[a.UP,a.DOWN]}],C=d("board",{state:()=>({row:0,col:0,board:[],selectedCoordinate:[],cells:[],isAnimating:!1,isAnimatingInitialAnimation:!1}),getters:{getCellId(){return({y:e,x:t})=>`${e},${t}`},hasPacmonInBoard(){return this.board.some(e=>e.some(t=>t===n.PACMON))},getPacmonCoordinate(){for(let e=0;e<this.board.length;e++)for(let t=0;t<this.board[e].length;t++)if(this.board[e][t]===n.PACMON)return{y:e,x:t};return null},hasSelectedCoordinate(){return this.selectedCoordinate.length>0},isBoardHasEmptyCell(){return this.board.some(e=>e.some(t=>t===n.EMPTY))}},actions:{generateBoard(){this.board=Array(this.row).fill([]).map(()=>Array(this.col).fill(n.EMPTY))},setBoardItem({y:e,x:t},s){this.board[e][t]=s},setBulkBoardItem(e){this.selectedCoordinate.forEach(t=>this.setBoardItem(t,e))},setSelectedCoordinate(e){this.selectedCoordinate.push(e)},setBulkSelectedCoordinate(e){var i;const t=(i=this.selectedCoordinate[this.selectedCoordinate.length-1])!=null?i:null;if(!t)return;const s={y:Math.min(t.y,e.y),x:Math.min(t.x,e.x)},o={y:Math.max(t.y,e.y),x:Math.max(t.x,e.x)};for(let r=s.y;r<=o.y;r++)for(let l=s.x;l<=o.x;l++)this.isInSelectedCoordinate({y:r,x:l})||this.setSelectedCoordinate({y:r,x:l})},isInSelectedCoordinate(e){return this.selectedCoordinate.some(t=>JSON.stringify(e)===JSON.stringify(t))},getSelectedCoordinateIndex(e){return this.selectedCoordinate.findIndex(t=>JSON.stringify(e)===JSON.stringify(t))},removeSelectedCoordinate(e){this.selectedCoordinate.splice(this.getSelectedCoordinateIndex(e),1)},clearSelectedCoordinate(){this.selectedCoordinate=[]},resetBoard(){this.clearSelectedCoordinate(),this.board=[],this.row=0,this.col=0,this.cells=[],this.isAnimating=!1},generateCells(){this.cells=this.board.reduce((e,t,s)=>[...e,...t.map((o,i)=>({id:this.getCellId({y:s,x:i}),count:0,swapDirection:null,swap:null,resolve:null}))],[])},getCell(e){return this.cells.find(t=>t.id===this.getCellId(e))},setCell(e,t,s){const o=this.cells.findIndex(i=>i.id===this.getCellId(e));this.cells[o][t]=s},setCellDirection(e,t){this.setCell(e,"swapDirection",t)},swapCell({currentCoordinate:e,nextCoordinate:t}){c.forEach(({axis:s,direction:o})=>{const{current:i,next:r}={current:e[s],next:t[s]};if(i===r)return;const l=i>r?0:1;this.setCellDirection(e,o[l%2]),this.setCellDirection(t,o[(l+1)%2])})}}});export{n as B,C as u};
